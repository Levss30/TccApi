// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TccApi.Data;

#nullable disable

namespace TccApi.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TccApi.Models.Agendamento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EstabelecimentoId")
                        .HasColumnType("bigint");

                    b.Property<int>("FormasDePagamento")
                        .HasColumnType("int");

                    b.Property<DateTime>("Hora_ag")
                        .HasColumnType("datetime2");

                    b.Property<string>("Local_ag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("data_ag")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EstabelecimentoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Agendamentos");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            EstabelecimentoId = 1L,
                            FormasDePagamento = 0,
                            Hora_ag = new DateTime(2023, 12, 6, 3, 27, 28, 459, DateTimeKind.Local).AddTicks(7530),
                            Local_ag = "Av. Ramiz Galvão",
                            UsuarioId = 1L,
                            data_ag = new DateTime(2023, 12, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("TccApi.Models.Estabelecimento", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CEP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cnpj")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Complemento")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Endereco")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome_est")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Numero_est")
                        .HasColumnType("int");

                    b.Property<byte[]>("Senha_hash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Senha_salt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Telefone")
                        .HasColumnType("int");

                    b.Property<long>("UsuarioId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Estabelecimentos");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CEP = "02223001",
                            Cnpj = "12123456/0001-12",
                            Complemento = 4,
                            Endereco = "Av. Ramiz Galvão",
                            Nome_est = "CutsCuts",
                            Numero_est = 1082,
                            Telefone = 934958271,
                            UsuarioId = 1L
                        });
                });

            modelBuilder.Entity("TccApi.Models.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Cpf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Foto")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Senha_hash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("Senha_salt")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("TipoUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Usuarios");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Cpf = "500.230.222-32",
                            Email = "Agatha.linhares@gmail.com",
                            Nome = "Agatha",
                            Senha_hash = new byte[] { 184, 225, 243, 1, 89, 22, 122, 86, 209, 97, 148, 145, 198, 240, 225, 152, 36, 25, 220, 160, 50, 37, 192, 72, 77, 79, 9, 92, 187, 222, 96, 5, 231, 81, 74, 28, 62, 172, 168, 112, 209, 193, 189, 152, 68, 152, 117, 250, 158, 21, 178, 126, 168, 140, 79, 166, 8, 165, 178, 221, 36, 155, 2, 76 },
                            Senha_salt = new byte[] { 37, 255, 62, 248, 42, 159, 72, 49, 165, 203, 2, 195, 161, 230, 177, 163, 167, 217, 60, 173, 7, 254, 48, 124, 104, 176, 48, 133, 172, 206, 34, 252, 48, 74, 11, 193, 124, 236, 56, 188, 48, 222, 251, 225, 9, 23, 130, 223, 100, 156, 237, 156, 186, 21, 159, 119, 103, 65, 199, 83, 200, 194, 167, 216, 247, 171, 182, 156, 14, 123, 183, 147, 24, 142, 171, 99, 30, 69, 193, 123, 32, 19, 96, 9, 152, 242, 12, 224, 48, 143, 187, 129, 40, 20, 216, 47, 163, 7, 68, 253, 32, 3, 10, 99, 189, 102, 138, 43, 5, 146, 199, 173, 114, 74, 16, 232, 54, 54, 244, 236, 80, 186, 110, 148, 157, 136, 231, 145 },
                            TipoUsuario = 0
                        });
                });

            modelBuilder.Entity("TccApi.Models.Agendamento", b =>
                {
                    b.HasOne("TccApi.Models.Estabelecimento", "Estabelecimentos")
                        .WithMany("Agendamentos")
                        .HasForeignKey("EstabelecimentoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TccApi.Models.Usuario", "Usuario")
                        .WithMany("Agendamentos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Estabelecimentos");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TccApi.Models.Estabelecimento", b =>
                {
                    b.HasOne("TccApi.Models.Usuario", "Usuario")
                        .WithMany("Estabelecimentos")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("TccApi.Models.Estabelecimento", b =>
                {
                    b.Navigation("Agendamentos");
                });

            modelBuilder.Entity("TccApi.Models.Usuario", b =>
                {
                    b.Navigation("Agendamentos");

                    b.Navigation("Estabelecimentos");
                });
#pragma warning restore 612, 618
        }
    }
}
